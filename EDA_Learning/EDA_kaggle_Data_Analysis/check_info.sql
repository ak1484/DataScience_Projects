-- SQLite
-- DROP TABLE df_orders;
-- create table df_orders ([order_id] int primary key ,[order_date] date, [ship_mode] varchar(20) , [segment] varchar(20) , [country] varchar(20), [city] varchar(20), [state] varchar(20), [postal_code] varchar(20), [region] varchar(20), [category] varchar(20), [sub_category] varchar(20), [product_id] varchar(50), [quantity] int, [discount] decimal(7,2), [sale_price] decimal(7,2), [profit] decimal(7,2))
-- SELECT * from df_orders;


-- find top 10 highest revenue generating products
-- SELECT product_id, SUM(sale_price) AS sales
-- FROM df_orders
-- GROUP BY product_id
-- ORDER BY sales DESC
-- LIMIT 10;

-- find top 5 highest selling products in each region
-- SELECT DISTINCT region FROM df_orders
-- WITH cte as (
-- SELECT region, product_id,SUM(sale_price) AS sales
-- FROM df_orders
-- GROUP BY region,product_id)
-- SELECT * FROM(
-- SELECT *
-- , ROW_NUMBER() over(PARTITION BY region ORDER BY sales desc) as rn
-- FROM cte ) A
-- WHERE rn<=5

-- find month over month growth comparison for 2022 and 2023 sales eg: jan 2022 vs jan 2023
-- SELECT DISTINCT strftime('%Y', order_date) AS year
-- FROM df_orders;
-- WITH cte AS (
--     SELECT 
--         strftime('%Y', order_date) AS year, 
--         strftime('%m', order_date) AS month, 
--         SUM(sale_price) AS sales
--     FROM df_orders
--     GROUP BY year, month
-- )
-- SELECT 
--     month,
--     SUM(CASE WHEN year = '2022' THEN sales ELSE 0 END) AS sales_2022,
--     SUM(CASE WHEN year = '2023' THEN sales ELSE 0 END) AS sales_2023
-- FROM cte 
-- GROUP BY month
-- ORDER BY month;

-- for each category which month had highest sales
-- WITH cte AS (
-- SELECT category, strftime('%Y%m', order_date) AS order_year_month, SUM(sale_price) AS sales
-- FROM df_orders
-- GROUP BY category,order_year_month
-- -- ORDER BY category,order_year_month
-- )
-- SELECT * FROM(
-- SELECT *,
-- ROW_NUMBER() OVER(PARTITION BY category ORDER BY sales DESC) AS rn
-- FROM cte) a 
-- WHERE rn=1

-- which sub category had the highest growth by profit in 2023 compare to 2022
-- SELECT DISTINCT strftime('%Y', order_date) AS year FROM df_orders;
-- WITH cte AS (
--     SELECT 
--         sub_category,
--         strftime('%Y', order_date) AS year, 
--         -- strftime('%m', order_date) AS month, 
--         SUM(sale_price) AS sales
--     FROM df_orders
--     GROUP BY sub_category,year
--     -- , month
-- )
-- , cte2 AS (
-- SELECT 
--     sub_category,
--     SUM(CASE WHEN year = '2022' THEN sales ELSE 0 END) AS sales_2022,
--     SUM(CASE WHEN year = '2023' THEN sales ELSE 0 END) AS sales_2023
-- FROM cte 
-- GROUP BY sub_category
-- -- ORDER BY sub_category
-- )
-- SELECT *
-- ,(sales_2023-sales_2022)*100/sales_2022 AS percentage_growth
-- FROM cte2
-- ORDER BY percentage_growth DESC 
-- LIMIT 1;